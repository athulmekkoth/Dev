import express, { Express, NextFunction, Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import jwt from 'jsonwebtoken';
import 'dotenv/config';
import redis from "../utils/client"

interface User {
  id: string;
  isadmin: boolean;
  username:string;
}

interface AuthenticatedRequest extends Request {
  user: User;
}

const prisma = new PrismaClient();
const Userlogin = async (req: Request, res: Response) => {
  try {
    const { email, password } = req.body;
    const user = await prisma.user.findUnique({ where: { email: email } });

    if (user) {
      const accessToken = jwt.sign(
        { userId: user.id, email: user.email, username: user.username },
        process.env.ACCESS_TOKEN_SECRET || '',{expiresIn:"15s"}
      );

      res.json({
        id: user.id,
        username: user.username,
        accessToken: accessToken
      });
     
    } else {
      res.json({ err: "wrong parameters" }).status(400);
    }
  } catch (error) {
    console.error(error);
    res.status(500).send('Internal Server Error');
  }
};

const verify = (req: Request, res: Response, next: NextFunction) => {
  const authHeader = req.headers['authorization'];

  if (authHeader) {
    const token = authHeader.split(" ")[1];

    jwt.verify(token, process.env.ACCESS_TOKEN_SECRET || '', (err: any, user: any) => {
      if (err) {
        if (err.name === 'TokenExpiredError') {
          // Token has expired
          res.status(401).send('Unauthorized: Token has expired');
        } else {
          // Other verification errors
          console.log(err)
          res.status(403).send('Forbidden');
        }
      } else {
        // Ensure the decoded user object is an object with a userId property
        if (typeof user === 'object' && user.userId) {
          (req as AuthenticatedRequest).user = user;
         
          next();
        } else {
          res.status(403).send('Forbidden: Invalid user data in token');
        }
      }
    });
  } else {
    res.status(401).send('Unauthorized');
  }
};

const deleteUser = async (req: Request, res: Response) => {
  try{

    console.log("id is"+req.user.userId)
    console.log("param is"+req.params.id)
    if(req.user.userId=== req.params.id ){
      {
        
        console.log('deleted')
      }
     
      
  }
  else{
 
      console.log("udayip")
    
  }
}
  catch(error){
    console.error(error);
    res.status(500).send('Internal Server Error');
  }
}
const refresh = async (req: Request, res: Response) => {

//take toekn from user
const rtoken=req.body.token

//send error ibalid
if(!rtoken) {
  return res.status(401).json({message:"no token not authenticated"})
}

//if ok create new token and send it to user

 
}
export {Userlogin,deleteUser,verify}
